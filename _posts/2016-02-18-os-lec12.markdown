---
layout: post
title:  "OS Lecture 12"
date:   2016-02-18 14:30:00 -0500
categories: cs580
---



## HW
![](/images/OSLEC12A.png)

## Solaris
* Mixture of BSD
	* + System V
	* + Sun own features
* Multi Queues with feedback

* OS is threaded
* user processses are threaded
* Priorities 0-169
	* int threads 160-169
		* 빨리안하면 인터럽트 몇개 놓칠수있다
	* RT threads - 100-159
		* monitoring equipment, guerantees certain amount of time
	* System threads - 60-99
		* executing sys calls
	* Interactive (IA) - 0-59
* Premptive scheduling
	* Slides

## Linux 2.4 & less
* single RQ
* Fixed Quantum
* priority set by Nice Level (-19,19)
	* 	0 default
	*  -19 highest important
*  Handled with processors poorly
* 쓰레드 많으면 프라어리티 소팅하는게 비쌈 O(n)?

## Linux 2.5
* O(1)
* Priority scheduling 0-140
	* 140: low priority, 0:high
* real time 0-99 
	* static - 한번정하면 왔다갔다 하지않음
* normal process 100-139
	* Nice -19 to +19, default 0
* A process can raise nice 
* Root can lower nice
* Dynamic priorities
	* computed from the nice value
* Interactivity can change IS(IP?)
	* A sleep value is maintained
		* incremented by time on a wait queue
		* decremented by time running
* Quantum is based on priority
	* 10-200ms, default 100
	* high priority gets high quantum
	* low priority(more often) gets high quantum
* At fork quantum/2
* Each processor has its own RQ
	* each RQ has 2 priority arrays
	* Active <-> Inactive : 왔다갔다 할때만다 레벨 조정, 퀀텀조정
	* 근데 모두 Inactive 되면 그걸 Active로 만듦

	| Active              | Inactive |
	|---------------------|-----|
	| 1              | 1 |
	| 2              | 2 |
	| 3 A              | 3 |
	| ...              | ... |
	| 100               |  |
	| 101 B C              |  |
	| 103               | 103 E |
	| 138 D              |  |
	| 140              |  |
	* 프로세서 어피니티에 대해 설명 못들음: 01:01:00

	
* Load balancer
	* move processes from RQ to RQ
	* called when a RQ is Empty 
	* every ms at idel
	* every 200ms otherwise

* Premption
	* return from interrupt
	* return from system call

## Linux 2.5
* CFS - completely fair scheduler
	* 
	