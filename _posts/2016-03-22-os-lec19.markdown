---
layout: post
title:  "OS Lecture 19"
date:   2016-03-22 14:30:00 -0500
categories: cs580
---



## Support For T-processes
* terminal process, 1 process per terminal
* user processes
	* protected address spaces (from other user process)
	* IO protection
		* all IO done by the OS
	* New Non-priv sys calls
		* read from terminal
		* write to terminal
		* delay 
		* get time of day
		* terminate
		* disk IO & virtual sem


## Mem model for T-procs
* run with MM on
* No seg 0
* seg 1 - private 32 pages
* seg 2 - shared 32 pages
* seg 3~31 - off
	* 32 segments
	* each seg has 1024 pages
	* each pages 1/2K 
* ![](http://bgshin.github.io/images/OSLEC19A.png)
* demand paging
	* the first time a page is referenced
		* page fault trap
		* OS picks a frame from the free pool and maps it into the segment
* in this phase there will be sufficient pages in the free pool
* ![](http://bgshin.github.io/images/OSLEC19B.png)


## Computing contexts
* Nucleus
	* s: supervisor bit - priv
	* m: off
	* int: off
* support level process
	* s: priv
	* int: on
	* m: on, 
		* seg0->PageTable (identity with holes(not every page turned on)
		* other segs off
* T-process (non-priv)
	* s: non-priv
	* int: on
	* m: on, 
		* seg0 X
		* seg1,2 on with pages coming from free pool
		* seg3-31 off
		* others off?
* T-process (after trap (SYScall9,10,11...)
	* s: on
	* int: on
	* m: on
		* + seg1 identity with holes

	
## Life of a T-process
* P1(supprt level process) creates T-process (SYS1)
* state 
	* priv
	* running support code
		* issues 3 sys 5's defines 3 handlers
		* LDST
			* s: off
			* pc - bootcode
			* sp - TOP of 31

			
* SYS9 (Read from terminal)
	* D3<-VirtualAdress of a buffer (read)
	* D2-> # of bytes read
* SYS10 (write to terminal)
	* D3<-VirtualAdress of a write buffer
	* D2-> # of bytes
* SYS13 Delay
	* D4<- # of microseconds
* SYS16 Get time of Day
	* D2->
* SYS17 Terminate

