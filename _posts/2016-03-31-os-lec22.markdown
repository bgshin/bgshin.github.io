---
layout: post
title:  "OS Lecture 22"
date:   2016-03-31 14:30:00 -0500
categories: cs580
---



## 숙제질문
* 터미널 버퍼가 어떻게 핏인 되는가?
	* T-proc - priv
	* seg table 
		* seg0 -> support text/data/BSS
		* seg1 (non-priv add space)
		* seg2 (non-priv add space)
	* VA - read from terminal
		* 프레즌빗이 어떤지 봐야함
	* I/O가 피지컬 메모리에 써야하는데 이게 문제인것임
	* priv T process는 seg0,seg1에 억세스됨
	* supp BSS->VA로 카피하면 멤메니지 펄트가 남
* 세그멘2는 스페셜
	* 세그멘1에는 디멘드페이징하면 페이지디먼이 프로세스에서 페이지테이블을 뺏어온다
	* 셈MM이 락킹 페이지테이블, 
	* 한놈이 세그2를 테스트 중에 다른놈이 오면 문제생김 다음숙제임
* 

## Virtual memory
* Need more logical memory than physical memory
	* 몇개는 세컨더리에 있다는 말
* Virtual address -> 
	* physical address (primary, RAM)
	* sencondary storage address 
* prevent wasting primary storage for infrequently used addresses


## HW support
* MMU almost the same
	* page table entry |P|M|R|frame#| 
	* for VM           |P|M|R|frame#|disk address|
		* p=1 이면 프렘넘버 발리드, 하드웨어에서 자동으로 이용함
		* p=0 이면 disk address valid, 이건 펄트날때 소프트웨어에 의해서 이용됨

## Algorithm
* In case of a page fault
	* aquire a free frame 
	* copy from  disk address to the free frame 
		* 언제 이걸 하고 언제 안하나?
	* fill in fram #
	* turn on the presence bit.

* Stealing a page (page replacement)
	* not enough free frames (페이지펄트?)
	* select a victim (PTE that is present)
	* acquire a disk adress
	* copy contents of frame to the disk address
	* turn presence bit off
	* Add frame to the free pool

	
## Virtual memory
* Need more logical memory than physical memory
* Performance?
* Let P prob of a page fault
* Let M = memory access time = 1 ns
* f = page fault time (In case of a page fault 하는 시간) = 1 ms (1000 micro s = 10^6 nano s)
* effective memory access time = (1-P) M + P f
	* = M-PM+Pf = M+P(f-M) ~ M+Pf = 1+10^6 P
* eg) array 2GB, phys mem 1GB
	* random access: P=1/2, T = 1+10^6/2
	* so P is critical
	* VM is great as long as pattern used has locality
	* requires locality of access


## Page replacement algorithm
* FIFO
	* victimize the present page that was demanded in earliest
	* ![](OSLEC22A)
	* Belady's Anomaly
		* more frames can be worse
	* Subset property
		* V frames present with fewer physical frames is a subset
	* FIFO 는 Subset property가 없다
* Theorem- A page replacement alg with the subset property  does not suffer from Belady
	* 더 큰 프렘에서 없다면 작은 프렘에도 없다 왜냐면 섭셋이니까


* Optimal
	* victimize the page that wasn't be used for the longest amount of time
	* satisfies the subset property

	
* LRU (least recently used)
	* Approx to optimal
