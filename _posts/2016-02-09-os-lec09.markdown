---
layout: post
title:  "OS Lecture 09"
date:   2016-02-09 14:30:00 -0500
categories: cs580
---


## Recall 
* Memory MAP
	* EVT
	* Trap/Int Save
	* Device Registers
	* RAM <= 16MB
* Machine State
	* 19 registers - 76 bytes
* Utility routine
	* LDST/STST (로드 스토어)
* OLD/NEW save areas


```bash
 -----
| old |
 -----
| new |
 -----
```



## Nucleus
* Micro Kernel
	* small-correct
	* fast so that it runs with interrupts off
* More OS service is provided by privleged processes
* process creation 
* interprocess communication
* pass up exceptions

### Syscalls in the nucleus
* SYS1 - create process
	* D4 <- address of a state t
	* D2 -> 0: successful -1:unsuccessful
	* RQ tail pointer to the queue of processes ready to run
	* 순서
		* allocProc - 프락티없으면 실패해서 D2에 0
		* copy the stat_t
		* Add to the tail of RQ
		* manage LINK
* SYS2 - terminate process
 	* terminates the current process AND all its decendants
 	* 자식을 죽여야하는데 자식을 다 갖지않고 어떻게 자료구조를 해야 (1-2개의 노드로 자식을 표현할수있을까)
* SYS3 - semop
	* D4 <- &VPOP
	* D3 <- length

	```bash
	 -------------------------------------------
	|  SA1 ; +-1  |  SA2 ; +-1   |  SA3 ; +-1   |
	 -------------------------------------------
	```

	* for inactive semophores
		* if *SA>0 +-1
		* if *SA=0 
			* +1 
			* -1 becomes active
	* for active semophores
		* if *SA<-1 +-1
		* if *SA=-1 
			* -1 
			* +1 becomes inactive
	* 자유케 되면 런큐로 간다
* SYS5
	* specify trap state vector
	* D2 <- 
		* 0 prog (0나누기)
		* 1 MM (메모리)
		* 2 sys
	* D3 <- &OLD (address임)
	* D4 <- &NEW (address임)
	* 0,1은 pass up exe
* SYS6 - GETCPUTIME
	* D2 -> 
	* 이것의 굿뉴스 뱃뉴스가 뭐지? 50:00분가량
* SYS7/SYS8 later - interrupts

### 메뉴얼

```bash
16MB
X
TOP mem - SP(이걸저장해야 top을 안다, STST로 저장함)


BSS (nuc)
DATA (nuc)
TEXT (nuc) - main -PC
Dev reg
TRAP/INT
EVT
```

* p1 - setting up state_t
	* p1은 테스트에 있다. 
	* 이거 주소 PC에, SP저장하면 됨
	* SR의 수퍼바이즈빗 중요 - 첫프로세스는 프리빌리지라서
		* MM은 안쓰므로 0
		* 0XX 인터럽 프라어리티 (인터럽 오프)
	* 